syntax = "proto3";

package api;

import "google/protobuf/timestamp.proto";
import "google/protobuf/duration.proto";

// from loraserver
import "api/common/common.proto";
import "api/gw/gw.proto";


enum RXWindow {
	RX1 = 0;
	RX2 = 1;
}

message UplinkFrameLog {
    // TX information of the uplink.
    gw.UplinkTXInfo tx_info = 1;

    // RX information of the uplink.
    repeated UplinkRXInfo rx_info = 2;

    // LoRaWAN PHYPayload.
    string phy_payload_json = 3 [json_name = "phyPayloadJSON"];
}

message DownlinkFrameLog {
    // TX information of the downlink.
    DownlinkTXInfo tx_info = 1;

    // LoRaWAN PHYPayload.
    string phy_payload_json = 2 [json_name = "phyPayloadJSON"];
}

// This is a copy of gw.UplinkRXInfo with the only change that the
// gateway_id is of type string so that we can return it as HEX encoded
// instead of base64.
message UplinkRXInfo {
    // Gateway ID.
    string gateway_id = 1;

    // RX time (only set when the gateway has a GPS module).
    google.protobuf.Timestamp time = 2;

    // RX time since GPS epoch (only set when the gateway has a GPS module).
    google.protobuf.Duration time_since_gps_epoch = 3;

    // RSSI.
    int32 rssi = 5;

    // LoRa SNR.
    double lora_snr = 6;

    // Channel.
    uint32 channel = 7;

    // RF Chain.
    uint32 rf_chain = 8;

    // Board.
    uint32 board = 9;

    // Antenna.
    uint32 antenna = 10;

    // Location.
    common.Location location = 11;

    // Fine-timestamp type.
    gw.FineTimestampType fine_timestamp_type = 12;

    // Fine-timestamp data.
    oneof fine_timestamp {
        // Encrypted fine-timestamp data.
        EncryptedFineTimestamp encrypted_fine_timestamp = 13;

        // Plain fine-timestamp data.
        gw.PlainFineTimestamp plain_fine_timestamp = 14;
    }

    // Gateway specific context.
    bytes context = 15;
}

// this s a copy of gw.EncryptedFineTimestamp which the only change that
// the fpga_id is of type string so that it can be returned in HEX format
// instead of base64.
message EncryptedFineTimestamp {
    // AES key index used for encrypting the fine timestamp.
    uint32 aes_key_index = 1;

    // Encrypted 'main' fine-timestamp (ns precision part of the timestamp).
    bytes encrypted_ns = 2 [json_name = "encryptedNS"];

    // FPGA ID.
    string fpga_id = 3 [json_name = "fpgaID"];
}

// Same comment as above applies to this message.
message DownlinkTXInfo {
    // Gateway ID.
    string gateway_id = 1;

    // TX frequency (in Hz).
    uint32 frequency = 5;

    // TX power (in dBm).
    int32 power = 6;

    // Modulation.
    common.Modulation modulation = 7;

    oneof modulation_info {
        // LoRa modulation information.
        gw.LoRaModulationInfo lora_modulation_info = 8;

        // FSK modulation information.
        gw.FSKModulationInfo fsk_modulation_info = 9;
    }

    // The board identifier for emitting the frame.
    uint32 board = 10;

    // The antenna identifier for emitting the frame.
    uint32 antenna = 11;

    // Timing defines the downlink timing to use.
    gw.DownlinkTiming timing = 12;

    oneof timing_info {
        // Immediately timing information.
        gw.ImmediatelyTimingInfo immediately_timing_info = 13;

        // Context based delay timing information.
        gw.DelayTimingInfo delay_timing_info = 14;

        // GPS Epoch timing information.
        gw.GPSEpochTimingInfo gps_epoch_timing_info = 15;
    }

    // Gateway specific context.
    // In case of a Class-A downlink, this contains a copy of the uplink context.
    bytes context = 16;
}
